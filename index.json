[{"authors":["admin"],"categories":null,"content":"Philipp Tölle is a passionate Solution Architect and Application Engineer. Striving always for the optimal solution in a given context.\nProper Software Development will ensure that your enterprise can trust the knowledge casted into your IT landscape. Future profitable growth will be build on top of a properly developed and maintained software foundation.\n Standard Software solves standard problems, but Standard Software will not differentiate you from your competition\n ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"https://www.phildev.ch/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"author","summary":"Philipp Tölle is a passionate Solution Architect and Application Engineer. Striving always for the optimal solution in a given context.\nProper Software Development will ensure that your enterprise can trust the knowledge casted into your IT landscape. Future profitable growth will be build on top of a properly developed and maintained software foundation.\n Standard Software solves standard problems, but Standard Software will not differentiate you from your competition\n ","tags":null,"title":"Philipp Tölle","type":"author"},{"authors":null,"categories":null,"content":"","date":1555604232,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555604232,"objectID":"ff74451b3444e3af198e39460afa976a","permalink":"https://www.phildev.ch/project/livingroom-lights/","publishdate":"2019-04-18T18:17:12+02:00","relpermalink":"/project/livingroom-lights/","section":"project","summary":"Custom made lights for my livingroom, combining smart-home IoT with practical making and woodwoork.","tags":[],"title":"Livingroom Lights","type":"project"},{"authors":null,"categories":null,"content":" A Currency conversion master data service looks like a good candidate for learning about a cloud native implementation for azure functions. This is a master data service, providing base rates for financial systems in an enterprise like accounting, valuations. It does NOT cover trading activities in the area of Asset Management or any other type of high frequency financial service.\nThe following characteristics speak for a serverless implementation:\n Update frequency once a day Data being served from a database Read only workload Read only but once type of workload  The goals of this project are outlined in the following\nGoals  Learn about Azure Functions Demonstrate FX Conversion is perfect a use case Find limits of Azure functions Demonstrate abilities  Highlights Concurrent spawing of functions via queue storage Data Factory to download large file via HTTP (avoid running out of function execution time). Two function apps, one part written in Kotlin, another part written with Java. Usage of Binding Expressions\nNotes The price of function execution is hidden in the storage accounts. The reason being that for each \u0026ldquo;cold\u0026rdquo; execution the jar with all dependencies is being read from the storage account.\nNevertheless costs can still be lower then today. ~ 100 USD/month for WUDIS is literally nothing.\nThere is only one jar per Function App and this jar is always at least 4MB.\nUsage of dependencies already added to azure java functions to reduce size of jar. Usage of JDK native implementations should be encourage to avoid bloated size of jars. Also the usage of Application Insights seems to be quite costly (50% of the cost). Binding Expressions are very useful and can expres a lot of what usually would be done by using the Storage SDK. On the other side the storage SDK does allow a more fine grained control.\nFunction Orchestration With the current lack of durable function support in Java, their are two solutions possible:\n Implmenting the orchestration layer with durable functions from C# Own implmentation  The solution does follow a Fan-IN/OUT pattern for the parsing of the historic files.\nThe Fan-Out part is fairly easy and is achieved by posting a list of messages (one for each day) to a queue. The subtask to work on the parsing of the XML file is triggered by a new message in such a queue.\nThe Fan-In part is rather more complex. Principially an atomic operation is needed to be 100% certain that all the parsing jobs did finish. A couple of strategies have each their specific disadvantages.\n Polling of the underlying datastore to count the finished daily spot documents is problematic because of the runtime limitations of Azure Functions (ca. 300 seconds) Another solution would be a counter that counts down everytime when a parsing has finished. The precondition again is atomicity. Here integrated functions in CosmosDB provide the solution. The counter will be integrated and once 0 is reached, a new document will be inserted into the CosmosDB. A function monitoring the changefeed will pickup the notification and trigger the calculation step.  Improvements  Memory intensive operations like parsing the xml dom have been moved to a singleton pattern. The usage of the event grid should be explored for coordidation among high volume of storage and function invocations. Alternatively a solution with stateful functions should be explored, once available for Java Functions. Logging can be reduced  Architecture Overview   ","date":1555603775,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555603775,"objectID":"ca62c21984aab01cca10ac4b74c7f44c","permalink":"https://www.phildev.ch/project/azure-functions-fx/","publishdate":"2019-04-18T18:09:35+02:00","relpermalink":"/project/azure-functions-fx/","section":"project","summary":"Self-learning exercise to learn about Azure Functions by implementing a fx-rates reference master data system.","tags":["azure","cloud","serverless"],"title":"Currency conversion rates master data service","type":"project"}]